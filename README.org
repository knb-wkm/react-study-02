#+title: react勉強会 2回目
#+STARTUP: indent inlineimages
#+options: ^:nil \n:t

* 前回のおさらい
- reactはviewを担当するライブラリ(frameworkと呼ぶには薄すぎる)

- reactのviewはコンポーネントという単位で分割される

- コンポーネントの状態及び手続きはstateに保持される
  state, statelessコンポーネントの話

- 親コンポーネントは子コンポーネントに状態及び手続きを配布する
  子コンポーネントは基本的にstatelessであるべき

* の前に興味深いpostを紹介
- 個人的にangularをdisるつもりはないのですが...
- Angular 2/4が狭量で遅すぎる理由
http://postd.cc/why-angular-2-4-is-too-little-too-late/

* 今回のテーマはredux
- 前回作成したtodoアプリの状態管理をreduxで管理する
  
- react + reduxはMVC, MVVMのような責任分割とは感覚が異なる(気がする)

* reduxとは
- 状態管理を行う薄いライブラリ

- reduxの概念はfluxのドキュメントが判りやすい
  http://facebook.github.io/flux/docs/in-depth-overview.html#content

- action
  dispatcherを実行する際の引数(type, objects)を管理するためのヘルパー
  実装自体はactionに定義しないのでview <-> storeへのインタフェース的な役割
  reactのイベントやコンストラクタから呼びだされる

- dispatcher
  actionから渡された具体的な処理を実行する関数の集り
  storeの状態変更の具体的な実装を行う
  
- store
  dispatcherにて変更された状態をviewへ流しこむ
  store自体に何か実装を行うことはない。

- view
  reactのコンポーネント

* 背景
- アプリが大きくなるにつれ状態管理がしんどくなってきた

* しんどい理由1 バケツリレー
- 親コンポーネントからのバケツリレー問題
  - state- > statetelssコンポーネントまでデータ、メソッドをリレーする必要がある
  - 例えば以下の例はBコンポーネントがstate, methodをリレーするだけになっている
  - コンポーネントの階層が増えるとBのようなコンポーネントがコードの見通しを悪くする
  - コンポーネントが増えるにつれて機能追加、保守がしんどくなってくる

#+begin_src js
const C = ({ collection, addData }) => {
  return (
    <div>
      {collection.map( data => <div>{data}</div> )}
    </div>
  );
};

const B = ({ collection, addData }) => {
  return (
    <div>
      <C collection={collection} addData={addData} />
    </div>
  );
};

class A extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [1,2,3]
    }
  }

  addData = (data) => {
    this.setState({
      data: [...this.state.data, data]
    });
  };

  render() {
    return (
      <div>
        <B data={this.state.data}
           addData={this.addData} />
      </div>
    );
  }
}
#+end_src

* しんどい理由2 asyncレイヤ
- 非同期レイヤで状態管理が更に煩雑になる問題

- 例えば以下のような非同期処理をコールバックするのが苦痛
  - modal起動
    setStateでmodal openをtrueにする

  - get(async)
    promise + fetchでserverからデータを取得
    fetchしたデータをsetStateでハメる
    (modal bodyの構築はコールバックしておく必要がある)

  - modal bodyのdomを構築

  - 編集, submit 
    ユーザアクション

  - post(async) 
    modalにて編集されたデータをサーバにデータをpostする
    (バリデーションエラーの表示があるためmodal closeはコールバック)

  - modalを閉じる

* 導入

#+begin_src shell
$ npm install --save redux
#+end_src

* 実装方針
- reduxは薄いレイヤなのでテストフレームワークを活用し単体で実装する

* テストフレームワーク(jest)入門1
- reducer.test.jsを作成, npm testを実行
  - 勉強会では便宜上ansi-termで実行するが、普通のターミナルがオススメ

- npm testが実行するファイル
  - "__tests__" ディレクトリに格納された拡張子がjsのファイル
  - .test.js or .spec.jsのファイル

- 試しに以下のコードを実行してみる

#+begin_src js
$ touch reducer.test.js
$ echo "console.log('foobar');" > reducer.test.js
$ npm test
#+end_src

* テストフレームワーク(jest)入門2
- doubleという引数を2倍するだけのメソッド
  
#+begin_src js
const double = (n) => {
  return n * 2;
};

describe("double関数のテスト", () => {
  it("引数を2倍したものを返却する", () => {
    const result = double(2);
    const expected = 4;

    expect(result).toEqual(expected);
  });

});
#+end_src

* reducer
- reduxのstoreはreducer関数を通して変更される

- reducerは純粋な関数(pure function)で実装される
  - pure functionとは副作用を伴わない関数のこと
  - 純粋関数についての議論は長くなるので別の機会にでも...

- reactはreactive(データが常に循環する)
  - 副作用で意としないデータ破壊は時として致命的なことも

* actionの実装例

- typeキーは必須
- 他キーに更新したいデータを格納する
- 本例では追加したいtodoオブジェクトを引数に渡している

#+begin_src js
const addTodo = (todo) => {
  return {
    type: "ADD_TODO",
    todo: todo
  };
};
#+end_src

* reducerの実装例

- initialState = 初期データ
- actionから渡されたtodoオブジェクトをconatしているだけ
#+begin_src js
const initialState = [
  {id: 1, name: "react勉強する", done: true},
  {id: 2, name: "更にreactを勉強する", done: false}
];

const todoReducer = (state = initialState, action) => {
  switch ( action.type ) {
  case "ADD_TODO":
    // [ ...ary, obj ] は ary.dconcat(obj)のシンタックスシュガー
    return [...state, action.todo];
  default:
    return state;
  }
};
#+end_src

* [...]シンタックスシュガー

- [...]はconcatと同じ 配列に値を追加し返却する
#+begin_src js
const aryA = [1,2,3];
const pushValue = 4;

[ ...aryA, pushValue ] // => [1,2,3,4]
aryA.concat(pushValue) // => [1,2,3,4]
#+end_src

* addTodoのtest

#+begin_src js
describe("todoReducerのテスト", () => {

  it("ADD_TODO", () => {
    const newTodo = { id: 3, name: "reducerを勉強する", done: false };
    const result = todoReducer(initialState, addTodo(newTodo));

    // 期待する値はinitialStateにnewTodoをconcatしたもの
    const expected = [
      {id: 1, name: "react勉強する", done: true},
      {id: 2, name: "更にreactを勉強する", done: false},
      newTodo
    ];
    expect(result).toEqual(expected);
  });
});
#+end_src

* toggleTodoの実装

- action
  - doneをトグルしたいtodoのidを渡している

#+begin_src js
const toggleTodo = (todo_id) => {
  return {
    type: "TOGGLE_TODO",
    todo_id: todo_id
  };
};
#+end_src

- reducer
- ちょっと難解だが引数のtodo_idのdoneをトグルしているだけ

#+begin_src js
  case "TOGGLE_TODO":
    const newTodo = state.map(todo => {
      if (todo.id === action.todo_id) {
        return { ...todo, done: !todo.done };
      }
      else {
        return todo;
      }
    });

    return newTodo;
#+end_src

* Array.prototype.map

Array.prototype.map
#+begin_src js
const array = [ 1, 2, 3 ];

// 配列の各要素を2倍して返却する
array.map(a => a * 2); // [2, 4, 6]

// 配列の各要素が2の倍数であれば0を返却する
array.map(a => {
  if ( a % 2 === 0 ) {
    return 0;
  }
  else {
    return a;
  }
}); // [1,0,3]
#+end_src

* {...}シンタックスシュガー

- オブジェクトをマージする
#+begin_src js

// key, valueを追加
let todo = { id: 1, name: "foo" };
{ ...todo, done: false }; // { id: 1, name: "foo", done: false }

// 指定したkeyのvalueを上書き
let todo = { id: 1, name: "foo", done: false };
{ ...todo, done: !todo.done }; // { id: 1, name: "foo", done: true }

// 複数のkey, valueを追加
let todo = { id: 1 };
{ ...todo, name: "foo", done: false }; // { id: 1, name: "foo", done: true }
#+end_src

* ということでtoggle reducerをリファクタ

- 冗長なのでシンプルにする
  - リファクタした瞬間にテストが走るのがイイ

#+begin_src js
  case "TOGGLE_TODO":
    return state.map(todo => {
      return todo.id === action.todo_id
      ? { ...todo, done: !todo.done }
      : todo;
    });
#+end_src

* toggleTodoテストの実装

#+begin_src js
  it("TOGGLE_TODO", () => {
    const toggleTodoId = 2;
    const result = todoReducer(initialState, toggleTodo(toggleTodoId));
    const expected = [
      {id: 1, name: "react勉強する", done: true},
      {id: 2, name: "更にreactを勉強する", done: true}, // doneがtrue->false
    ];

    expect(result).toEqual(expected);
  });
#+end_src

* addTodoに機能を追加

- idは自動でincrementされたものが付与される
- doneのデフォルト値はfalse

- action
#+begin_src js
const addTodo = (name) => {
  return {
    type: "ADD_TODO",
    name: name
  };
};
#+end_src

- reducer
#+begin_src js
  case "ADD_TODO":
    // [ ...ary, obj ] は ary.dconcat(obj)のシンタックスシュガー
    const newTodo = {
      id: state.slice().sort( (a, b) => b.id - a.id )[0].id + 1,
      name: action.name,
      done: false
    };

    return [...state, newTodo];
#+end_src

- test
#+begin_src js
  it("ADD_TODO", () => {
    const newTodo = "reducerを勉強する";
    const result = todoReducer(initialState, addTodo(newTodo));

    // 期待する値はinitialStateにnewTodoをconcatしたもの
    const expected = [
      {id: 1, name: "react勉強する", done: true},
      {id: 2, name: "更にreactを勉強する", done: false},
      {id: 3, name: newTodo, done: false}
    ];
    expect(result).toEqual(expected);
  });
#+end_src

* 作成したreducerをredux storeに組み込む

- reactと連携するための下準備
- react viewを購読(subscribe)する必要があるので
#+begin_src js
import { createStore } from "redux";
...
const store = createStore(todoReducer);
#+end_src

* storeのテスト

- dispatchにactionを渡す
- getStateで現在のstoreの状態を取得する
#+begin_src js
describe("storeのテスト", () => {
  it("ADD_TODO", () => {
    const newTodo = "storeを勉強する";
    store.dispatch(addTodo(newTodo));
    const result = store.getState();
    const expected = [
      {id: 1, name: "react勉強する", done: true},
      {id: 2, name: "更にreactを勉強する", done: false},
      {id: 3, name: newTodo, done: false}
    ];

    expect(result).toEqual(expected);
  });
});
#+end_src

* reducer, actionを別ファイルに切り出し
15/reduxブランチを参照

* reactとreduxをconnectする

- index.js
  - 全コンポーネントにstoreを流しこむ
#+begin_src js
+import store from "./reducer";
+import { Provider } from "react-redux";
 import App from "./App";
 
 ReactDOM.render(
-  <App />,
+  <Provider store={store}>
+    <App />
#+end_src

* reactとreduxをconnectする
- App.js
  - 裏側にstoreが入りこんでいるのでconnectする
  - stateをstoreに置換する

#+begin_src js
+import { connect } from "react-redux";
 import Todo from "./Todo";
 
 class App extends Component {
@@ -68,4 +69,12 @@ class App extends Component {
   }
 };
+          {this.props.todos.map(todo => 
           <Todo todo={todo} toggleTodo={toggleTodo} />)}
 
+const mapStateToProps = state => {
+  return {
+    todos: state
+  };
+};
+
+App = connect(mapStateToProps)(App);
#+end_src

* setStateをdispatchに置換する

- このままだと、add,toggleが動作しない
- setStateを実行するメソッドをdispatchに置換する

- まずはaddTodoから
#+begin_src js
+import { addTodo } from "./actions";
 
 class App extends Component {
   constructor(props) {
@@ -29,17 +30,7 @@ class App extends Component {
     const addTodo = (e) => {
       if (e.key !== "Enter") return;
 
-      const next_id = this.state.todos.slice()
-            .sort( (a, b) => b.id - a.id )[0].id + 1;
-
-      const newTodo = {
-        id: next_id,
-        name: this.refs.todoText.value,
-        done: false
-      };
-
-      this.setState({ todos: [...this.state.todos, newTodo] });
-
+      this.props.addTodo(this.refs.todoText.value);
       this.refs.todoText.value = "";
     };
 
@@ -69,12 +60,18 @@ class App extends Component {
   }
 };
 
+const mapDispatchToProps = dispatch => {
+  return {
+    addTodo: name => dispatch(addTodo(name))
+  };
+};
+
 
-App = connect(mapStateToProps)(App);
+App = connect(mapStateToProps, mapDispatchToProps)(App);

#+end_src

* setStateをdispatchに置換する

- Todo.js
#+begin_src js
+import { connect } from "react-redux";
+import { toggleTodo } from "./actions";

-        <button onClick={() => toggleTodo(todo.id)}>
+        <button onClick={() => this.props.toggleTodo(todo.id)}>
 
+const mapStateToProps = state => {
+  return { };
+};
+
+const mapDispatchToProps = dispatch => {
+  return {
+    toggleTodo: todo_id => dispatch(toggleTodo(todo_id))
+  };
+};
+
+Todo = connect(mapStateToProps, mapDispatchToProps)(Todo);
#+end_src

- App.js
  - 不要なメソッドを削除する
#+begin_src js
-    const toggleTodo = (todo_id) => {
-      this.setState({
-        todos: this.state.todos.map(
-          todo => todo.id === todo_id ?
-            {...todo, done: !todo.done} : todo
-        )
-      });
-    };
-
 
-          <Todo todo={todo} toggleTodo={toggleTodo} />)}
+          <Todo todo={todo} />)}
#+end_src

* hideDoneの存在を忘れていた

- doneを非表示にするのを忘れていたので
#+begin_src js
     const todos = this.state.hideDone
+          ? this.props.todos.filter( todo => !todo.done )
+          : this.props.todos;

          {todos.map(todo => 
          <Todo todo={todo} />)}
#+end_src

- もうstate.todosは不要になった
#+begin_src js
     this.state = {
-      todos: [
-        {id: 1, name: "react勉強する", done: true},
-        {id: 2, name: "更にreactを勉強する", done: false}
-      ],
       hideDone: false
#+end_src
